{"version":3,"file":"uncapitalize-1kCRMbhH.js","names":["data: T"],"sources":["../src/uncapitalize.ts"],"sourcesContent":["import { purry } from \"./purry\";\n\n/**\n * Makes first character of a string lower-case. Uses the built-in\n * [`String.prototype.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n * for the runtime, and the built-in [`Uncapitalize`](https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#Uncapitalizestringtype)\n * utility type for typing.\n *\n * For other case manipulations see: `toUpperCase`, `toLowerCase`, `capitalize`,\n * `toCamelCase`, `toKebabCase`, and `toSnakeCase`.\n *\n * !IMPORTANT: This function might work _incorrectly_ for **non-ascii** inputs.\n *\n * @param data - A string.\n * @signature\n *   R.uncapitalize(data);\n * @example\n *   R.uncapitalize(\"HELLO WORLD\"); // \"hELLO WORLD\"\n * @dataFirst\n * @category String\n */\nexport function uncapitalize<T extends string>(data: T): Uncapitalize<T>;\n\n/**\n * Makes first character of a string upper-case. Uses the built-in\n * [`String.prototype.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n * for the runtime, and the built-in [`Uncapitalize`](https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#Uncapitalizestringtype)\n * utility type for typing.\n *\n * For other case manipulations see: `toUpperCase`, `toLowerCase`, `capitalize`,\n * `toCamelCase`, `toKebabCase`, and `toSnakeCase`.\n *\n * !IMPORTANT: This function might work _incorrectly_ for **non-ascii** inputs.\n *\n * @signature\n *   R.uncapitalize()(data);\n * @example\n *   R.pipe(\"HELLO WORLD\", R.uncapitalize()); // \"hELLO WORLD\"\n * @dataLast\n * @category String\n */\nexport function uncapitalize(): <T extends string>(data: T) => Uncapitalize<T>;\n\nexport function uncapitalize(...args: ReadonlyArray<unknown>): unknown {\n  return purry(uncapitalizeImplementation, args);\n}\n\nconst uncapitalizeImplementation = <T extends string>(\n  data: T,\n): Uncapitalize<T> =>\n  `${data[0]?.toLowerCase() ?? \"\"}${data.slice(1)}` as Uncapitalize<T>;\n"],"mappings":"4CA2CA,SAAgB,EAAa,GAAG,EAAuC,CACrE,OAAO,EAAM,EAA4B,EAAK,AAC/C,CAED,MAAM,EAA6B,AACjCA,GAEA,GAAG,EAAK,IAAI,aAAa,EAAI,KAAK,EAAK,MAAM,EAAE,EAAE"}