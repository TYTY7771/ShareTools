{"version":3,"file":"toKebabCase-DfXTesFY.js","names":["data: S"],"sources":["../src/toKebabCase.ts"],"sourcesContent":["import type { Join, Words } from \"type-fest\";\nimport { words } from \"./internal/words\";\nimport { purry } from \"./purry\";\n\ntype KebabCase<S extends string> = string extends S\n  ? string\n  : Lowercase<Join<Words<S>, \"-\">>;\n\n/**\n * Convert a text to kebab-Case by splitting it into words and joining them back\n * together with \"-\", and then lowering the case of the result.\n *\n * For other case manipulations see: `toLowerCase`, `toUpperCase`, `capitalize`,\n * `uncapitalize`, and `toCamelCase`.\n *\n * !IMPORTANT: This function might work _incorrectly_ for **non-ascii** inputs.\n *\n * @param data - A string.\n * @signature\n *   R.toKebabCase(data);\n * @example\n *   R.toKebabCase(\"hello world\"); // \"hello-world\"\n *   R.toKebabCase(\"__HELLO_WORLD__\"); // \"hello-world\"\n * @dataFirst\n * @category String\n */\nexport function toKebabCase<S extends string>(data: S): KebabCase<S>;\n\n/**\n * Convert a text to kebabCase by splitting it into words and joining them back\n * together with \"-\", and then lowering the case of the result.\n *\n * For other case manipulations see: `toLowerCase`, `toUpperCase`, `capitalize`,\n * `uncapitalize`, and `toCamelCase`.\n *\n * !IMPORTANT: This function might work _incorrectly_ for **non-ascii** inputs.\n *\n * @signature\n *   R.toKebabCase()(data);\n * @example\n *   R.pipe(\"hello world\", R.toKebabCase()); // \"hello-world\"\n *   R.pipe(\"__HELLO_WORLD__\", toKebabCase()); // \"hello-world\"\n * @dataLast\n * @category String\n */\nexport function toKebabCase(): <S extends string>(data: S) => KebabCase<S>;\n\nexport function toKebabCase(...args: ReadonlyArray<unknown>): unknown {\n  return purry(toKebabCaseImplementation, args);\n}\n\nconst toKebabCaseImplementation = <S extends string>(data: S): KebabCase<S> =>\n  // @ts-expect-error [ts2322] -- To avoid importing our own utilities for this\n  // we are using the built-in `join` and `toLowerCase` functions which aren't\n  // typed as well. This is equivalent to `toLowerCase(join(words(data), \"-\"))`\n  // which TypeScript infers correctly as KebabCase.\n  words(data).join(\"-\").toLowerCase();\n"],"mappings":"wFA+CA,SAAgB,EAAY,GAAG,EAAuC,CACpE,OAAO,EAAM,EAA2B,EAAK,AAC9C,CAED,MAAM,EAA4B,AAAmBA,GAKnD,EAAM,EAAK,CAAC,KAAK,IAAI,CAAC,aAAa"}