{"version":3,"file":"differenceWith-DhPB8utZ.js","names":["other: ReadonlyArray<TSecond>","isEquals: IsEquals<TFirst, TSecond>"],"sources":["../src/differenceWith.ts"],"sourcesContent":["import { purryFromLazy } from \"./internal/purryFromLazy\";\nimport type { LazyEvaluator } from \"./internal/types/LazyEvaluator\";\nimport { SKIP_ITEM } from \"./internal/utilityEvaluators\";\n\ntype IsEquals<TFirst, TSecond> = (a: TFirst, b: TSecond) => boolean;\n\n/**\n * Excludes the values from `other` array.\n * Elements are compared by custom comparator isEquals.\n *\n * @param array - The source array.\n * @param other - The values to exclude.\n * @param isEquals - The comparator.\n * @signature\n *    R.differenceWith(array, other, isEquals)\n * @example\n *    R.differenceWith(\n *      [{a: 1}, {a: 2}, {a: 3}, {a: 4}],\n *      [{a: 2}, {a: 5}, {a: 3}],\n *      R.equals,\n *    ) // => [{a: 1}, {a: 4}]\n * @dataFirst\n * @lazy\n * @category Array\n */\nexport function differenceWith<TFirst, TSecond>(\n  array: ReadonlyArray<TFirst>,\n  other: ReadonlyArray<TSecond>,\n  isEquals: IsEquals<TFirst, TSecond>,\n): Array<TFirst>;\n\n/**\n * Excludes the values from `other` array.\n * Elements are compared by custom comparator isEquals.\n *\n * @param other - The values to exclude.\n * @param isEquals - The comparator.\n * @signature\n *    R.differenceWith(other, isEquals)(array)\n * @example\n *    R.differenceWith(\n *      [{a: 2}, {a: 5}, {a: 3}],\n *      R.equals,\n *    )([{a: 1}, {a: 2}, {a: 3}, {a: 4}]) // => [{a: 1}, {a: 4}]\n *    R.pipe(\n *      [{a: 1}, {a: 2}, {a: 3}, {a: 4}, {a: 5}, {a: 6}], // only 4 iterations\n *      R.differenceWith([{a: 2}, {a: 3}], R.equals),\n *      R.take(2),\n *    ) // => [{a: 1}, {a: 4}]\n * @dataLast\n * @lazy\n * @category Array\n */\nexport function differenceWith<TFirst, TSecond>(\n  other: ReadonlyArray<TSecond>,\n  isEquals: IsEquals<TFirst, TSecond>,\n): (array: ReadonlyArray<TFirst>) => Array<TFirst>;\n\nexport function differenceWith(...args: ReadonlyArray<unknown>): unknown {\n  return purryFromLazy(lazyImplementation, args);\n}\n\nconst lazyImplementation =\n  <TFirst, TSecond>(\n    other: ReadonlyArray<TSecond>,\n    isEquals: IsEquals<TFirst, TSecond>,\n  ): LazyEvaluator<TFirst> =>\n  (value) =>\n    other.every((otherValue) => !isEquals(value, otherValue))\n      ? { done: false, hasNext: true, next: value }\n      : SKIP_ITEM;\n"],"mappings":"wHA0DA,SAAgB,EAAe,GAAG,EAAuC,CACvE,OAAO,EAAc,EAAoB,EAAK,AAC/C,CAED,MAAM,EACJ,CACEA,EACAC,IAEF,AAAC,GACC,EAAM,MAAM,AAAC,GAAe,CAAC,EAAS,EAAO,EAAW,CAAC,CACrD,CAAE,KAAM,GAAO,QAAS,GAAM,KAAM,CAAO,EAC3C"}