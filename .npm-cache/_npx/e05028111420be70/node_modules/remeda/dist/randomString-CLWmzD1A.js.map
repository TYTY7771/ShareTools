{"version":3,"file":"randomString-CLWmzD1A.js","names":["length: number","out: Array<string>"],"sources":["../src/randomString.ts"],"sourcesContent":["import { purry } from \"./purry\";\n\nconst ALPHABET =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n/**\n * Random a non-cryptographic random string from characters a-zA-Z0-9.\n *\n * @param length - The length of the random string.\n * @returns The random string.\n * @signature\n *   R.randomString(length)\n * @example\n *   R.randomString(5) // => aB92J\n * @dataFirst\n * @category String\n */\nexport function randomString(length: number): string;\n\n/**\n * Random a non-cryptographic random string from characters a-zA-Z0-9.\n *\n * @returns The random string.\n * @signature\n *   R.randomString()(length)\n * @example\n *   R.pipe(5, R.randomString()) // => aB92J\n * @dataLast\n * @category String\n */\nexport function randomString(): (length: number) => string;\n\nexport function randomString(...args: ReadonlyArray<unknown>): unknown {\n  return purry(randomStringImplementation, args);\n}\n\nfunction randomStringImplementation(length: number): string {\n  const out: Array<string> = [];\n  for (let iteration = 0; iteration < length; iteration++) {\n    const randomChar = ALPHABET[Math.floor(Math.random() * ALPHABET.length)]!;\n    out.push(randomChar);\n  }\n  return out.join(\"\");\n}\n"],"mappings":"4CAgCA,SAAgB,EAAa,GAAG,EAAuC,CACrE,OAAO,EAAM,EAA4B,EAAK,AAC/C,CAED,SAAS,EAA2BA,EAAwB,CAC1D,IAAMC,EAAqB,CAAE,EAC7B,IAAK,IAAI,EAAY,EAAG,EAAY,EAAQ,IAAa,CACvD,IAAM,EAAa,iEAAS,KAAK,MAAM,KAAK,QAAQ,CAAG,GAAgB,EACvE,EAAI,KAAK,EAAW,AACrB,CACD,OAAO,EAAI,KAAK,GAAG,AACpB"}