{"version":3,"file":"toSnakeCase-Cyg1iFE9.js","names":["data: S"],"sources":["../src/toSnakeCase.ts"],"sourcesContent":["import type { Join, Words } from \"type-fest\";\nimport { words } from \"./internal/words\";\nimport { purry } from \"./purry\";\n\ntype SnakeCase<S extends string> = string extends S\n  ? string\n  : Lowercase<Join<Words<S>, \"_\">>;\n\n/**\n * Convert a text to snake-case by splitting it into words and joining them back\n * together with \"_\", and then lowering the case of the result.\n *\n * For other case manipulations see: `toLowerCase`, `toUpperCase`, `capitalize`,\n * `uncapitalize`, `toCamelCase`, and `toKebabCase`.\n *\n * !IMPORTANT: This function might work _incorrectly_ for **non-ascii** inputs.\n *\n * @param data - A string.\n * @signature\n *   R.toSnakeCase(data);\n * @example\n *   R.toSnakeCase(\"hello world\"); // \"hello_world\"\n *   R.toSnakeCase(\"__HELLO_WORLD__\"); // \"hello_world\"\n * @dataFirst\n * @category String\n */\nexport function toSnakeCase<S extends string>(data: S): SnakeCase<S>;\n\n/**\n * Convert a text to snake-case by splitting it into words and joining them back\n * together with \"_\", and then lowering the case of the result.\n *\n * For other case manipulations see: `toLowerCase`, `toUpperCase`, `capitalize`,\n * `uncapitalize`, `toCamelCase`, and `toKebabCase`.\n *\n * !IMPORTANT: This function might work _incorrectly_ for **non-ascii** inputs.\n *\n * @signature\n *   R.toSnakeCase()(data);\n * @example\n *   R.pipe(\"hello world\", R.toSnakeCase()); // \"hello_world\"\n *   R.pipe(\"__HELLO_WORLD__\", toSnakeCase()); // \"hello_world\"\n * @dataLast\n * @category String\n */\nexport function toSnakeCase(): <S extends string>(data: S) => SnakeCase<S>;\n\nexport function toSnakeCase(...args: ReadonlyArray<unknown>): unknown {\n  return purry(toSnakeCaseImplementation, args);\n}\n\nconst toSnakeCaseImplementation = <S extends string>(data: S): SnakeCase<S> =>\n  // @ts-expect-error [ts2322] -- To avoid importing our own utilities for this\n  // we are using the built-in `join` and `toLowerCase` functions which aren't\n  // typed as well. This is equivalent to `toLowerCase(join(words(data), \"_\"))`\n  // which TypeScript infers correctly as SnakeCase.\n  words(data).join(\"_\").toLowerCase();\n"],"mappings":"wFA+CA,SAAgB,EAAY,GAAG,EAAuC,CACpE,OAAO,EAAM,EAA2B,EAAK,AAC9C,CAED,MAAM,EAA4B,AAAmBA,GAKnD,EAAM,EAAK,CAAC,KAAK,IAAI,CAAC,aAAa"}