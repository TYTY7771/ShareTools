{"version":3,"file":"isEmpty-eMi1zfBb.js","names":["data: object | string | undefined"],"sources":["../src/isEmpty.ts"],"sourcesContent":["import type { IterableContainer } from \"./internal/types/IterableContainer\";\n\n/**\n * A function that checks if the passed parameter is empty.\n *\n * `undefined` is also considered empty, but only when it's in a union with a\n * `string` or string-like type.\n *\n * This guard doesn't work negated because of typescript limitations! If you\n * need to check that an array is *not* empty, use `R.hasAtLeast(data, 1)`\n * and not `!R.isEmpty(data)`. For strings and objects there's no way in\n * typescript to narrow the result to a non-empty type.\n *\n * @param data - The variable to check.\n * @returns True if the passed input is empty, false otherwise.\n * @signature\n *    R.isEmpty(data)\n * @example\n *    R.isEmpty(undefined) //=>true\n *    R.isEmpty('') //=> true\n *    R.isEmpty([]) //=> true\n *    R.isEmpty({}) //=> true\n *    R.isEmpty('test') //=> false\n *    R.isEmpty([1, 2, 3]) //=> false\n *    R.isEmpty({ length: 0 }) //=> false\n * @category Guard\n */\nexport function isEmpty<T extends string | undefined>(\n  data: T,\n): data is\n  | (\"\" extends T ? \"\" : never)\n  | (undefined extends T ? undefined : never);\nexport function isEmpty(data: IterableContainer): data is [];\nexport function isEmpty<T extends object>(\n  data: T,\n): data is Record<keyof T, never>;\n\nexport function isEmpty(data: object | string | undefined): boolean {\n  if (data === undefined) {\n    return true;\n  }\n\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  if (Array.isArray(data)) {\n    return data.length === 0;\n  }\n\n  return Object.keys(data).length === 0;\n}\n"],"mappings":"AAqCA,SAAgB,EAAQA,EAA4C,CAalE,OAZI,IAAS,IAAA,GACJ,GAGL,OAAO,GAAS,UAIhB,MAAM,QAAQ,EAAK,CACd,EAAK,SAAW,EAGlB,OAAO,KAAK,EAAK,CAAC,SAAW,CACrC"}